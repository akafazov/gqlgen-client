package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/akafazov/gqlgen-client/graph/model"
	libmodel "github.com/akafazov/gqlgen/graph/model"
	"github.com/akafazov/gqlgen/pkg/meetups"
)

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*model.Meetup, error) {
	m := libmodel.NewMeetup{
		Name:        input.Name,
		Description: input.Description,
	}
	newmeetup, err := meetups.CreateMeetup(m)
	meetup := &model.Meetup{
		ID:          newmeetup.ID,
		Name:        newmeetup.Name,
		Description: newmeetup.Description,
	}
	return meetup, err
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*model.Meetup, error) {
	println("-- query: meetups")
	ms, err := meetups.GetMeetups(ctx)

	meetups := make([]*model.Meetup, len(ms))
	for i, m := range ms {
		meetups[i] = &model.Meetup{
			ID:          m.ID,
			Name:        m.Name,
			Description: m.Description,
		}
	}

	return meetups, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	us, _ := meetups.GetUsers(ctx)
	users := make([]*model.User, len(us))
	for i, u := range us {
		users[i] = &model.User{
			ID:       u.ID,
			Username: u.Username,
			Email:    u.Email,
			// Meetups: u.Meetups,
		}
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
